
import React from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Sparkles, Mail, Printer } from "lucide-react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";

interface ResultsStepProps {
  recommendation: string;
  onStartNew: () => void;
}

const ResultsStep: React.FC<ResultsStepProps> = ({ recommendation, onStartNew }) => {
  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
          <head>
            <title>Diet Recommendation</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 { color: #059669; font-size: 28px; margin-bottom: 20px; }
              h2 { color: #047857; font-size: 24px; margin-top: 30px; margin-bottom: 15px; }
              h3 { color: #065f46; font-size: 20px; margin-top: 25px; margin-bottom: 10px; }
              h4 { color: #064e3b; font-size: 18px; margin-top: 20px; margin-bottom: 8px; }
              h5 { color: #064e3b; font-size: 16px; margin-top: 15px; margin-bottom: 6px; }
              p { margin-bottom: 12px; }
              li { margin-bottom: 6px; margin-left: 20px; }
              .header { text-align: center; margin-bottom: 40px; }
              .footer { text-align: center; margin-top: 40px; color: #666; font-size: 14px; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>ðŸ¥— Your Personalized Diet Recommendation</h1>
              <p style="color: #666;">Generated by NutriAI on ${new Date().toLocaleDateString()}</p>
            </div>
            <div class="content">
              ${formatRecommendationForPrint(recommendation)}
            </div>
            <div class="footer">
              <p>Created with NutriAI - Your AI-Powered Nutrition Assistant</p>
            </div>
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
      printWindow.close();
    }
    toast.success("Print dialog opened");
  };

  const handleEmail = async () => {
    try {
      toast.info("Preparing to send email...");
      
      const { data, error } = await supabase.functions.invoke('send-recommendation-email', {
        body: { recommendation }
      });

      if (error) {
        throw error;
      }

      toast.success("Recommendation sent to your email!");
    } catch (error) {
      console.error('Error sending email:', error);
      toast.error("Failed to send email. Please try again.");
    }
  };

  const formatRecommendationForPrint = (text: string) => {
    return text.split('\n').map((line) => {
      if (line.startsWith('# ')) {
        return `<h1>${line.slice(2)}</h1>`;
      }
      if (line.startsWith('## ')) {
        return `<h2>${line.slice(3)}</h2>`;
      }
      if (line.startsWith('### ')) {
        return `<h3>${line.slice(4)}</h3>`;
      }
      if (line.startsWith('**') && line.endsWith('**')) {
        return `<h4>${line.slice(2, -2)}</h4>`;
      }
      if (line.startsWith('*') && line.endsWith('*') && !line.includes('**')) {
        return `<h5>${line.slice(1, -1)}</h5>`;
      }
      if (line.startsWith('- ')) {
        return `<li>${line.slice(2)}</li>`;
      }
      if (line.trim() === '') {
        return '<br>';
      }
      return `<p>${line}</p>`;
    }).join('');
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <div className="w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-4">
          <Sparkles className="w-8 h-8 text-green-600" />
        </div>
        <h2 className="text-2xl font-semibold">Your Personalized Diet Recommendation</h2>
      </div>
      
      <Card>
        <CardContent className="pt-6">
          <div className="prose prose-sm max-w-none">
            {recommendation.split('\n').map((line, index) => {
              if (line.startsWith('# ')) {
                return <h1 key={index} className="text-2xl font-bold mt-6 mb-3">{line.slice(2)}</h1>;
              }
              if (line.startsWith('## ')) {
                return <h2 key={index} className="text-xl font-semibold mt-5 mb-2">{line.slice(3)}</h2>;
              }
              if (line.startsWith('### ')) {
                return <h3 key={index} className="text-lg font-medium mt-4 mb-2">{line.slice(4)}</h3>;
              }
              if (line.startsWith('**') && line.endsWith('**')) {
                return <h4 key={index} className="font-semibold text-base mt-3 mb-1">{line.slice(2, -2)}</h4>;
              }
              if (line.startsWith('*') && line.endsWith('*') && !line.includes('**')) {
                return <h5 key={index} className="font-medium text-base mt-3 mb-1">{line.slice(1, -1)}</h5>;
              }
              if (line.startsWith('- ')) {
                return <li key={index} className="ml-4 mb-1">{line.slice(2)}</li>;
              }
              if (line.trim() === '') {
                return <br key={index} />;
              }
              return <p key={index} className="mb-2">{line}</p>;
            })}
          </div>
        </CardContent>
      </Card>
      
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <Button onClick={handleEmail} variant="outline" className="flex items-center gap-2">
          <Mail className="w-4 h-4" />
          Email Recommendation
        </Button>
        
        <Button onClick={handlePrint} variant="outline" className="flex items-center gap-2">
          <Printer className="w-4 h-4" />
          Print Recommendation
        </Button>
        
        <Button onClick={onStartNew} variant="outline">
          Start New Assessment
        </Button>
      </div>
    </div>
  );
};

export default ResultsStep;
