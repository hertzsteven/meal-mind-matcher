
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get the authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
      }
    );

    // Get the current user
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    
    if (userError || !user) {
      throw new Error('User not authenticated');
    }

    const { recommendation } = await req.json();

    if (!recommendation) {
      throw new Error('Recommendation is required');
    }

    // Format the recommendation for email
    const formatRecommendationForEmail = (text: string) => {
      return text.split('\n').map((line) => {
        if (line.startsWith('# ')) {
          return `<h1 style="color: #059669; font-size: 28px; margin-bottom: 16px;">${line.slice(2)}</h1>`;
        }
        if (line.startsWith('## ')) {
          return `<h2 style="color: #047857; font-size: 24px; margin-top: 24px; margin-bottom: 12px;">${line.slice(3)}</h2>`;
        }
        if (line.startsWith('### ')) {
          return `<h3 style="color: #065f46; font-size: 20px; margin-top: 20px; margin-bottom: 10px;">${line.slice(4)}</h3>`;
        }
        if (line.startsWith('**') && line.endsWith('**')) {
          return `<h4 style="color: #064e3b; font-size: 18px; margin-top: 16px; margin-bottom: 8px;">${line.slice(2, -2)}</h4>`;
        }
        if (line.startsWith('*') && line.endsWith('*') && !line.includes('**')) {
          return `<h5 style="color: #064e3b; font-size: 16px; margin-top: 12px; margin-bottom: 6px;">${line.slice(1, -1)}</h5>`;
        }
        if (line.startsWith('- ')) {
          return `<li style="margin-bottom: 4px; margin-left: 16px;">${line.slice(2)}</li>`;
        }
        if (line.trim() === '') {
          return '<br>';
        }
        return `<p style="margin-bottom: 8px; line-height: 1.5;">${line}</p>`;
      }).join('');
    };

    const emailHtml = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Your Diet Recommendation</title>
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 32px;">
            <h1 style="color: #059669; font-size: 32px; margin-bottom: 8px;">ðŸ¥— Your Personalized Diet Recommendation</h1>
            <p style="color: #666; font-size: 16px;">Generated by NutriAI on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div style="background: #f9fafb; border-radius: 8px; padding: 24px; margin-bottom: 24px;">
            ${formatRecommendationForEmail(recommendation)}
          </div>
          
          <div style="text-align: center; margin-top: 32px; padding-top: 24px; border-top: 1px solid #e5e7eb;">
            <p style="color: #666; font-size: 14px;">Created with NutriAI - Your AI-Powered Nutrition Assistant</p>
            <p style="color: #666; font-size: 12px;">This recommendation was personalized based on your health goals and preferences.</p>
          </div>
        </body>
      </html>
    `;

    // Here you would typically use a service like Resend to send the email
    // For now, we'll simulate sending the email
    console.log('Email would be sent to:', user.email);
    console.log('Email content prepared');

    return new Response(JSON.stringify({ 
      success: true, 
      message: 'Email sent successfully',
      recipient: user.email 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in send-recommendation-email function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
